worker_processes  8;
error_log  logs/error.log  info;
events {
    worker_connections  4096;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    access_log off;
    sendfile        on;
    keepalive_requests 256000;
    keepalive_timeout  600s;

    upstream tnt_backend {
        server 127.0.0.1:3301;
        keepalive 32;
    }
    upstream backend {
        server 127.0.0.1:8089;
        keepalive 32;
    }
    server {
        listen       8080;
        server_name  localhost;
        location /tnt {
            tnt_http_rest_methods all;
            tnt_pass_http_request off;
            tnt_method rest;
            tnt_buffer_size 1m;
            tnt_pass tnt_backend;
        }
        location /tnt_proxy {
            internal;
            tnt_method process_request;
            tnt_buffer_size 100k;
            tnt_pass_http_request on parse_args;
            tnt_method process_request;
            tnt_pass tnt_backend;
        }
        location /http {
            proxy_pass http://backend/;
            proxy_socket_keepalive on;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        location /lua {
            rewrite_by_lua '
               local cjson = require("cjson")
               local map = {
                 GET = ngx.HTTP_GET,
                 POST = ngx.HTTP_POST,
                 PUT = ngx.HTTP_PUT,
               }
               -- hide `{"params": [...]}` from a user
               ngx.req.read_body()
               local body = ngx.req.get_body_data()
               if body then
                    body = "{\\"params\\": [" .. body .. "]}"
               end
               local res = ngx.location.capture("/tnt_proxy", {
                 args = ngx.var.args,
                 method = map[ngx.var.request_method],
                 body = body
               })
               if res.status == ngx.HTTP_OK then
                 local answ = cjson.decode(res.body)
                 -- Read reply
                 local result = answ["result"]
                 if result ~= nil then
                   ngx.status = result[1]
                   for k, v in pairs(result[2]) do
                     ngx.header[k] = v
                   end
                   table.remove(result, 1)
                   ngx.say(cjson.encode(result))
                 else
                   ngx.status = 502
                   ngx.say("Tarantool does not work")
                 end
                 -- Finalize execution
                 ngx.exit(ngx.OK)
               else
                 ngx.status = res.status
                 ngx.say(res.body)
               end
               ';
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}